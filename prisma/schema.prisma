generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatar    String?
  phone     String?
  members   Member[]
  orders    Order[]

  @@map("users")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  sku            String          @unique
  barcode        String?
  categoryId     String
  costPrice      Float
  sellingPrice   Float
  memberPrice    Float?
  stock          Int             @default(0)
  minStock       Int             @default(0)
  maxStock       Int?
  status         String          @default("ACTIVE")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orderItems     OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  stockMovements StockMovement[]

  @@map("products")
}

model Supplier {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  @@map("suppliers")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  company     String?
  taxNumber   String?
  creditLevel String?
  status      String   @default("ACTIVE")
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]

  @@map("customers")
}

model Order {
  id          String      @id @default(cuid())
  orderNo     String      @unique
  type        String
  status      String      @default("PENDING")
  supplierId  String?
  customerId  String?
  memberId    String?
  totalAmount Float
  paidAmount  Float       @default(0)
  orderDate   DateTime    @default(now())
  userId      String
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  user        User        @relation(fields: [userId], references: [id])
  member      Member?     @relation(fields: [memberId], references: [id])
  customer    Customer?   @relation(fields: [customerId], references: [id])
  supplier    Supplier?   @relation(fields: [supplierId], references: [id])
  payments    Payment[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model StockMovement {
  id        String   @id @default(cuid())
  productId String
  type      String
  quantity  Int
  reason    String?
  orderId   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Member {
  id                 String              @id @default(cuid())
  memberNo           String              @unique
  name               String
  phone              String?             @unique
  email              String?
  gender             String?
  birthday           DateTime?
  address            String?
  company            String?
  levelId            String
  status             String              @default("ACTIVE")
  membershipFee      Float?
  membershipExpiry   DateTime?
  registeredBy       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  registeredUser     User                @relation(fields: [registeredBy], references: [id])
  level              MemberLevel         @relation(fields: [levelId], references: [id])
  membershipPayments MembershipPayment[]
  orders             Order[]

  @@map("members")
}

model MemberLevel {
  id            String   @id @default(cuid())
  name          String
  description   String?
  membershipFee Float
  maxUsers      Int      @default(1)
  maxProducts   Int      @default(100)
  maxOrders     Int      @default(1000)
  features      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  members       Member[]

  @@map("member_levels")
}

model MembershipPayment {
  id          String   @id @default(cuid())
  memberId    String
  amount      Float
  paymentDate DateTime @default(now())
  method      String
  status      String   @default("PENDING")
  startDate   DateTime
  endDate     DateTime
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  member      Member   @relation(fields: [memberId], references: [id])

  @@map("membership_payments")
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  amount        Float
  method        String
  status        String   @default("PENDING")
  transactionId String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model FinanceRecord {
  id          String   @id @default(cuid())
  type        String
  category    String
  amount      Float
  description String?
  orderId     String?
  recordDate  DateTime @default(now())
  createdAt   DateTime @default(now())

  @@map("finance_records")
}

// Production Prisma schema file for PostgreSQL
// This file is used for Vercel deployment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderType {
  PURCHASE
  SALE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  ALIPAY
  WECHAT
}

enum RecordType {
  INCOME
  EXPENSE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[]
  members Member[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  sku           String   @unique
  barcode       String?  @unique
  categoryId    String
  purchasePrice Decimal  @db.Decimal(10, 2)
  salePrice     Decimal  @db.Decimal(10, 2)
  stock         Int      @default(0)
  minStock      Int      @default(0)
  maxStock      Int?
  unit          String   @default("ä»¶")
  image         String?
  status        String   @default("ACTIVE")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category       Category        @relation(fields: [categoryId], references: [id])
  orderItems     OrderItem[]
  stockMovements StockMovement[]

  @@map("products")
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  phone     String?
  email     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("suppliers")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  phone     String?
  email     String?
  address   String?
  company   String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  type        OrderType
  status      OrderStatus @default(PENDING)
  supplierId  String?
  customerId  String?
  memberId    String?
  userId      String
  totalAmount Decimal     @db.Decimal(10, 2)
  paidAmount  Decimal     @default(0) @db.Decimal(10, 2)
  discount    Decimal     @default(0) @db.Decimal(10, 2)
  notes       String?
  orderDate   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  customer       Customer?       @relation(fields: [customerId], references: [id])
  member         Member?         @relation(fields: [memberId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  items          OrderItem[]
  stockMovements StockMovement[]
  payments       Payment[]
  financeRecords FinanceRecord[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model StockMovement {
  id        String       @id @default(cuid())
  productId String
  type      MovementType
  quantity  Int
  reason    String?
  orderId   String?
  createdAt DateTime     @default(now())

  product Product @relation(fields: [productId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])

  @@map("stock_movements")
}

model Member {
  id           String    @id @default(cuid())
  memberNumber String    @unique
  name         String
  phone        String?
  email        String?
  gender       String?
  birthday     DateTime?
  address      String?
  levelId      String
  balance      Decimal   @default(0) @db.Decimal(10, 2)
  totalSpent   Decimal   @default(0) @db.Decimal(10, 2)
  lastVisit    DateTime?
  notes        String?
  status       String    @default("ACTIVE")
  userId       String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  level    MemberLevel        @relation(fields: [levelId], references: [id])
  user     User               @relation(fields: [userId], references: [id])
  orders   Order[]
  payments MembershipPayment[]

  @@map("members")
}

model MemberLevel {
  id        String  @id @default(cuid())
  name      String  @unique
  discount  Decimal @default(0) @db.Decimal(5, 2)
  minSpent  Decimal @default(0) @db.Decimal(10, 2)
  benefits  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[]

  @@map("member_levels")
}

model MembershipPayment {
  id          String        @id @default(cuid())
  memberId    String
  amount      Decimal       @db.Decimal(10, 2)
  type        String
  method      PaymentMethod
  description String?
  createdAt   DateTime      @default(now())

  member Member @relation(fields: [memberId], references: [id])

  @@map("membership_payments")
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order          Order           @relation(fields: [orderId], references: [id])
  financeRecords FinanceRecord[]

  @@map("payments")
}

model FinanceRecord {
  id          String     @id @default(cuid())
  type        RecordType
  amount      Decimal    @db.Decimal(10, 2)
  category    String
  description String?
  orderId     String?
  paymentId   String?
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  order   Order?   @relation(fields: [orderId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@map("finance_records")
} 